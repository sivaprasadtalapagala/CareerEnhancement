"async and await make promises easier to write"

async makes a function return a Promise

await makes a function wait for a Promise



//basic level code


function delay(ms) {
    return new Promise((resolve) => {
      setTimeout(resolve, ms);
    });
  }
  
  async function exampleAsyncFunction() {
    console.log("Start");
    await delay(2000); // Wait for 2 seconds
    console.log("Middle");
    await delay(1000); // Wait for 1 second
    console.log("End");
  }
  
  exampleAsyncFunction();

  



=======================================================================
  //medium level code
  // app.js

async function fetchGitHubUser(username) {
    try {
        const response = await fetch(`https://api.github.com/users/${username}`);
        if (!response.ok) {
            throw new Error("User not found");
        }
        const userData = await response.json();
        return userData;
    } catch (error) {
        throw error;
    }
}

async function displayUserData(username) {
    try {
        const userData = await fetchGitHubUser(username);
        const appDiv = document.getElementById("app");
        appDiv.innerHTML = `
            <h1>${userData.login}</h1>
            <img src="${userData.avatar_url}" alt="Avatar">
            <p>Followers: ${userData.followers}</p>
            <p>Following: ${userData.following}</p>
        `;
    } catch (error) {
        console.error("Error:", error);
    }
}

// Usage
displayUserData("octocat"); // Replace with any GitHub username






==================================================================
//advanced level code

// app.js

// Function to fetch to-do items
async function fetchTodoItems() {
    try {
        const response = await fetch('http://localhost:3000/todos'); // Replace with your API URL
        if (!response.ok) {
            throw new Error('Failed to fetch to-do items');
        }
        const todos = await response.json();
        return todos;
    } catch (error) {
        throw error;
    }
}

// Function to add a new to-do item
async function addTodoItem(text) {
    try {
        const response = await fetch('http://localhost:3000/todos', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ text }),
        });
        if (!response.ok) {
            throw new Error('Failed to add a to-do item');
        }
        const addedTodo = await response.json();
        return addedTodo;
    } catch (error) {
        throw error;
    }
}

// Function to delete a to-do item
async function deleteTodoItem(id) {
    try {
        const response = await fetch(`http://localhost:3000/todos/${id}`, {
            method: 'DELETE',
        });
        if (!response.ok) {
            throw new Error('Failed to delete the to-do item');
        }
        return true;
    } catch (error) {
        throw error;
    }
}

// Function to display to-do items
async function displayTodoItems() {
    try {
        const todos = await fetchTodoItems();
        const todoList = document.getElementById('todo-list');
        todoList.innerHTML = '';
        todos.forEach((todo) => {
            const listItem = document.createElement('li');
            listItem.innerHTML = `
                ${todo.text}
                <button data-id="${todo.id}" class="delete-button">Delete</button>
            `;
            listItem.querySelector('.delete-button').addEventListener('click', async (event) => {
                const id = event.target.getAttribute('data-id');
                await deleteTodoItem(id);
                displayTodoItems();
            });
            todoList.appendChild(listItem);
        });
    } catch (error) {
        console.error('Error:', error);
    }
}

// Add to-do item on form submission
const addTodoForm = document.getElementById('add-todo-form');
addTodoForm.addEventListener('submit', async (event) => {
    event.preventDefault();
    const text = document.getElementById('todo-text').value;
    if (text) {
        await addTodoItem(text);
        document.getElementById('todo-text').value = '';
        displayTodoItems();
    }
});

// Initial display of to-do items
displayTodoItems();
