1) Explain what Express.js is.

Express.js is a popular web application framework for building websites and web services using the JavaScript programming language. It simplifies the process of creating web applications by providing a set of tools and functions that make it easier to handle things like handling web requests, managing routes, and sending responses to users. In simple terms, it's like a toolkit that web developers use to build websites and web applications more quickly and efficiently.


2) What are some distinctive features of Express?   

Express.js has several distinctive features that make it popular among web developers:

Simplicity: It's straightforward to use and understand, making it great for both beginners and experienced developers.

Middleware: Express uses middleware functions that can process requests before they reach your main application logic. This allows you to add features like authentication, logging, or error handling easily.

Routing: Express provides a way to define routes for different parts of your application. For example, you can have separate routes for handling user profiles, blog posts, and comments.

HTTP Utility Methods: It simplifies handling HTTP requests and responses, making it easier to send data to the client, handle forms, and respond to various HTTP methods (GET, POST, PUT, DELETE, etc.).

Template Engines: Express can integrate with template engines like EJS or Handlebars, which help you generate dynamic HTML content on the server.

Community and Ecosystem: It has a large and active community with a wide range of third-party packages and extensions available, which can save you time when developing web applications.

In simple terms, Express makes it easy to create web applications by providing tools for handling requests, organizing your code, and adding extra features. It's popular because it's user-friendly and has a lot of support from other developers.


======3) Is Express.js front-end or backend framework?======

Express.js or Express is a JavaScript backend framework. It is mainly designed to develop complete web applications (single-page, multi-page, and hybrid web applications) and APIs. Express is the backend component of the MEAN stack where M stands for MongoDB, which handles database; E stands for Express, which handles backend; A stands for AngularJS, which is for the front-end, and N stands for Node.


4) Why do we use Express.js?
Express.js is an automatically prebuilt Node.js framework that facilitates us to create server-side web applications faster and smarter. The main reason for choosing Express is its simplicity, minimalism, flexibility, and scalability characteristics.


5) What is the difference between Express.js and Node.js?


In simple terms, the main difference between Express.js and Node.js is their purpose:

Node.js: Node.js is a runtime environment that allows you to run JavaScript code on the server. It's like the engine that powers your server, letting you execute JavaScript outside of web browsers. Node.js provides the foundation for building server-side applications.

Express.js: Express.js, on the other hand, is a web application framework that runs on top of Node.js. It's like a set of tools and functions that make it easier to create web applications and handle web-related tasks such as routing, handling HTTP requests, and sending responses.

Think of Node.js as the engine of a car, and Express.js as the body of the car with all the features and controls that make it a functional vehicle. You need Node.js to run JavaScript on the server, and you can use Express.js to build web applications on top of Node.js.


6) How does an Express code look like?
The express.js program is saved with ".js" extension.

See the example:


var express = require('express');    
var app = express();    
app.get('/', function (req, res) {    
  res.send('Welcome to JavaTpoint!');    
});    
var server = app.listen(8000, function () {    
  var host = server.address().address;    
  var port = server.address().port;    
  console.log('Example app listening at http://%s:%s', host, port);    
});   


7) Write a code to get post a query in Express.js.
var bodyParser = require('body-parser')  
app.use( bodyParser.json() );       // to support JSON-encoded   
app.use(bodyParser.urlencoded({     // to support URL-encoded   
  extended: true  
})); 



8) What do you understand by Scaffolding in Express.js?

Scaffolding is a technique used for creating the skeleton structure of an application. It facilitates users to easily create their public directories, routes, views, etc., or a web application skeleton. Generally, users manually create their public directory, add middleware, create separate route files, etc. Using a scaffolding tool, they can set up all these things to directly get started with building their application.

There are two ways to install Scaffolding and use it in your application.

Express application generator
Yeoman
Express application generator: This is used to create an application skeleton quickly. Use the following command to install the Express application generator.

npm install express-generator -g  
express myApp  
By using the above command, a project named "myApp" will be created along with following the files/folders in the project.

Bin: The bin folder contains one file called www is the main configuration file of the app.
Public: The public folder contains JavaScript, CSS, and images, etc.
Routes: This folder contains the routing files.
Views: The view folder contains the view files of the application.
js: The app.js file is the main file of the application.
json: The package.json file is the manifest file. It contains all metadata of the project, such as the packages used in the app (called dependencies) etc.
Now, we have to install all the dependencies mentioned in the package.json file by using the following command:

cd myApp  
npm install  
Yeoman: Use the following command in your terminal to install Yeoman:

npm install -g yeoman  
Yeoman uses generators to scaffold out applications.



9) Do Other MVC frameworks also support scaffolding?

The Scaffolding technique is also supported by other MVC frameworks other than Express. The following frameworks mainly support it: Ruby on Rails, OutSystems Platform, Play framework, Django, MonoRail, Brail, Symfony, Laravel, CodeIgniter, YII, CakePHP, Phalcon PHP, Model-Glue, PRADO, Grails, Catalyst, Seam Framework, Spring Roo, ASP.NET, etc.


10) Which are the arguments available to an Express JS route handler function?

Following are the arguments that are available to an Express.js route handler-function:

Req: the request object
Res: the response object
Next (optional): It is a function employed to pass management to one of the above route handlers.
Note: The third argument is optional and should be omitted; however, in some cases, it is helpful.


===11) What is the difference between Express and Django?===

Express and Django are both web frameworks, but they are used in different programming languages and have some differences:

Programming Language:

Express: It's a web framework for JavaScript and primarily used with Node.js on the server side.
Django: It's a web framework for Python, so your server-side code is written in Python.
Ecosystem:

Express: It's more minimalistic and flexible, allowing you to choose and integrate various libraries and components as needed.
Django: It's a more comprehensive framework that follows the "batteries-included" philosophy, meaning it provides a lot of built-in features and tools for common web development tasks.
Community and Libraries:

Express: Has a large and active community with many third-party packages and extensions, giving you flexibility but requiring you to make more choices.
Django: Has a strong community and a well-defined set of features, which can make development faster and easier but with less flexibility in some cases.
Architecture:

Express: Follows a more minimalist, "do-it-yourself" approach, allowing you to structure your application as you see fit.
Django: Has a predefined project structure and enforces a certain way of organizing your code, which can be helpful for beginners.
Learning Curve:

Express: Can have a steeper learning curve for beginners due to its flexibility and the need to make more decisions about your application's structure.
Django: Offers a more guided approach and can be easier for newcomers to get started with web development.
In simple terms, Express is for JavaScript and Node.js, offering flexibility and choice, while Django is for Python, providing a more opinionated and comprehensive approach to web development. The choice between them often comes down to the programming language you're most comfortable with and the level of control and structure you desire for your web project.



===12) How can you enable ,debugging in Express.js app?
There are different ways to enable debugging in Express.js app in different Operating Systems

Use the following command on Linux:

DEBUG=express:*   
node app.js  
Use the following command on Windows:

set DEBUG=express:*   
node app.js   


====13) How can you allow CORS in Express.js?
We can allow CORS in Express.js, by adding the following code in server.js:

app.all('*', function(req, res, next) {  
res.set('Access-Control-Allow-Origin', '*');  
res.set('Access-Control-Allow-Methods', 'GET, POST, DELETE, PUT');  
res.set('Access-Control-Allow-Headers', 'X-Requested-With, Content-Type');  
if ('OPTIONS' == req.method) return res.send(200);  
next();  
});  



===14) How can you deal with error handling in Express.js? 

Explain with an example.
Error handling is much easier in the Express versions over Express 4.0. Use the following steps to do the error handling:

Create an Express.js application. There is no built-in middleware like error handler in express 4.0, so you have to either install a middleware or create a custom one.

Create a Middleware:

Create a middleware as following:

// error handler  
app.use(function(err, req, res, next) {  
// set locals, only providing error in development  
res.locals.message = err.message;  
res.locals.error = req.app.get('env') === 'development' ? err : {};  
// render the error page  
res.status(err.status || 500);  
res.render('error');  
});  
Install Error Handler Middleware:

Install the errorhandler as following:

npm install errorhandler --save  
Create a variable:

var errorhandler = require('errorhandler')  
Use the middleware as following:

if (process.env.NODE_ENV === 'development') {  
 // only use in development  
  app.use(errorhandler({log: errorNotification}))  
}  
function errorNotification(err, str, req) {  
 var title = 'Error in ' + req.method + ' ' + req.url  
 notifier.notify({  
   title: title,  
   message: str  
 })  
}  



===15) Write the code to start serving static files in Express.js.=====

See the Example:

app.use(express.static('public'))  
app.use('/static', express.static(path.join(__dirname, 'public')))  


====16) What is Middleware in Express.js? What are the different types of Middleware?(,middleWare)====

Middleware is a function invoked by the Express routing layer before the final request handler.

Middleware functions are used to perform the following tasks:

It is used to execute any code.
It is also used to make changes to the request and the response objects.
It is responsible for ending the request-response cycle.
It can call the next middleware function in the stack.
Note: If the current middleware function does not end the request-response cycle, it must call next() to pass control to the next middleware function. Otherwise, the request will be left hanging.
Type of Middleware

Following are the main types of Middleware:

Application-level Middleware
Router-level Middleware
Error-handling Middleware
Built-in Middleware
Third-party Middleware
Application-level middleware: The application-level middleware method is used to bind to the app object using app.use() method. It applies on all routes.

//This middleware will execute for each route.  
app.use(function (req, res, next) {  
  console.log('Current Time:', Date.now())  
  next()  
})  
Router-level Middleware: The router-level Middleware is used to bind to a specific instance of express.Router().Built-in Middleware: The built-in Middleware was introduced with version 4.x. It ends the dependency on Connect.

There are the following built-in middleware functions in Express.js:

static: It is used to serve static assets such as HTML files, images, etc.
json: It is used to parse the incoming requests with JSON payloads. It is available with Express 4.16.0+
urlencoded: It is used to parse the incoming requests with URL-encoded payloads. It is available with Express 4.16.0+
Third-party Middleware: There are many third-party middleware available such as:

Body-parser
Cookie-parser
Mongoose
Sequelize
Cors
Express-validator
To handle HTTP POST requests in Express.js version 4 and above, we have to install a middleware module called body-parser. Body-parser extracts the entire body portion of an incoming request stream and exposes it on req.body, The Middleware was a part of Express.js earlier, but now you have to install it separately. You can install it by using the following command:

npm install MODULE_NAME  
You can load it by using requires and used later:

See the Example:

var bodyParser = require('body-parser');  
app.use(bodyParser.json());  
app.use(bodyParser.urlencoded({ extended: false }))  
Note: You can use multiple middleware as an array on a single route.
See the Example:

var middlewareArray = [middleware1, middleware2]  
app.get('/home', middlewareArray, function (req, res, next) {  
  //Code snippets  
})  


====17) Which template engines do Express support?(,templateEngines)====

Express.js supports any template engine that follows the (path, locals, callback) signature.


====18) How can we render a pain HTML?====

There is no need to "render" HTML with the res.render() function. If you have a specific file, you can use the res.sendFile() function, but you should use the express if you serve many assets from a directory.static() middleware function.